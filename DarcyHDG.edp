/* Darcy2D pelo método HDG-Cockburn */

include "common.idp"
load "iovtk";
load "Element_PkEdge"   //pra as arestas
load "Element_Mixte"    //Elemntos do tipo RT, BDM
load "Element_P3"

macro Div(u) (dx(u[0])+dy(u[1]))//
macro Rot(u) (dx(u[1])-dy(u[0]))//
macro Nor(u) (u[0]*N.x + u[1]*N.y)//
macro u() [u1,u2]//
macro v() [v1,v2]//

real eps = 1e-7;
real xini= 0.0, xfim=1.0;
real yini= 0.0, yfim=1.0;

int nref = 4;
real[int] L2erroP(nref);
real[int] L2erroU(nref);

for(int n=0; n<nref; n++){
	  int nel = 10*2^n; //2^(n+4);
	//mesh Th=buildmesh(G1(n)+G2(n)+G3(n)+G4(n)); // malha não estruturada
	  mesh Th=square(nel,nel,[xini+(xfim-xini)*x, yini+(yfim-yini)*y], flags=1);

	  func f = 8*pi*pi*sin(2*pi*x)*sin(2*pi*y);
	  /* pressão exata */
	  func pe = sin(2*pi*x)*sin(2*pi*y);

	  /* velocidade exata */
	  func ue1 = -2*pi*cos(2*pi*x)*sin(2*pi*y);
	  func ue2 = -2*pi*sin(2*pi*x)*cos(2*pi*y);
	  /* Condição de contorno */	
	  func g=0.0;
	  
	  /*
	  fespace Vh(Th,[P1dc,P1dc,P1dc,P1edge]);
	  fespace Ih(Th,[P0,P0]);
	  fespace Rh(Th,P0);
	  */

	  fespace Vh(Th,[P2dc,P2dc,P2dc,P2edge]);
	  fespace Ih(Th,[P1,P1]);
	  fespace Rh(Th,P1);

	  Vh [u1,u2,p,lmb], [v1,v2,q,mu];

	  problem HDGDarcy([u1,u2,p,lmb],[v1,v2,q,mu], solver=sparsesolver) = int2d(Th)( u'*v )
									    - int2d(Th)( p*Div(v) )
									    - int2d(Th)( Div(u)*q )
									    + intfa(Th)( (p-lmb)*(q-mu) )
									    - int2d(Th)( eps*p*q )
		                        				    + intfa(Th)( Nor(v)*lmb )
		                        				    + intfa(Th)( Nor(u)*mu )
									    - int2d(Th)( -f*q )
									    + on(1,2,3,4,lmb=g);

	  //real cpu1 = clock();
	  HDGDarcy;
	  //real cpu2 = clock()-cpu1;
	  //cout << "Tempo de Simulacao =" << cpu2 << endl;

	  Ih [u1int, u2int] = [u1,u2];
	  Rh pint = p;

	  L2erroP[n] = int2d(Th)(abs(pint-pe)^2);
	  L2erroU[n] = int2d(Th)(abs(u1int-ue1)^2 + abs(u2int-ue2)^2);
		//L2erroU[n] = int2d(Th)(abs(u1-ue1)^2 + abs(u2-ue2)^2);
}


ofstream fp("pressaoHDG222.dat");
ofstream fv("velocidadeHDG222.dat");
for(int n=0; n<nref; n++){
	fp << 10*2^n <<"\t"<< L2erroP[n] << endl;
}
for(int n=0; n<nref; n++){
	fv << 10*2^n <<"\t"<< L2erroU[n] << endl;
}


for(int n=1; n<nref; n++){
	cout <<"Taxa de Convergencia P ="<< log10(L2erroP[n-1]/L2erroP[n])/log10(2.0) << endl;
}

cout << "=================================" << endl;

for(int n=1; n<nref; n++){
	cout <<"Taxa de Convergencia U ="<< log10(L2erroU[n-1]/L2erroU[n])/log10(2.0) << endl;
}
/* Graficas da solução */
//plot(u,wait=1,value=1);
//plot(p,dim=2,fill=1,wait=1,value=1);

//int[int] Order = [1, 1];
//savevtk("sdhm.vtu",Th,u,p, dataname="u p", order=Order);
